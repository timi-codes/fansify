generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  // üìù Extend this model

  id        Int            @id @default(autoincrement())
  username  String         @unique
  digest    String
  role      String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  requests  TradeRequest[]

  wallet        Wallet @relation(fields: [walletAddress], references: [address])
  walletAddress String @unique

  @@map("users")
}

model Wallet {
  id               Int    @id @default(autoincrement())
  address          String @unique
  privateKeyDigest String
  publicKey        String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  memberships Membership[] @relation(name: "MembershipOwner")
  curated     Membership[] @relation(name: "MembershipCreator")

  owner User?

  @@map("wallets")
}

model TradeRequest {
  // üìù Extend this model 

  id        Int      @id @default(autoincrement())
  status    String?
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("trade_requests")
}

model Membership {
  id Int @id @default(autoincrement())
  tag         String  @unique
  name        String
  description String
  price       Float
  status      String   @default("UNSOLD")
  trxHash     String   @unique
  updatedAt   DateTime @default(now())
  createdAt   DateTime @default(now())

  creator        Wallet @relation(name: "MembershipCreator", fields: [creatorAddress], references: [address])
  creatorAddress String

  owner        Wallet @relation(name: "MembershipOwner", fields: [ownerAddress], references: [address])
  ownerAddress String

  @@map("memberships")
}
