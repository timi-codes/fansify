generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  // üìù Extend this model

  id               Int            @id @default(autoincrement())
  username         String         @unique
  ethereumAddress  String         @unique
  digest           String
  role             String
  privateKeyDigest String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  requests         TradeRequest[]
  membershipsCreated  Membership[] @relation(name: "MembershipCreator")
  membershipsOwned    Membership[] @relation(name: "MembershipOwner")

  @@map("users")
}

model TradeRequest {
  // üìù Extend this model 

  id        Int      @id @default(autoincrement())
  status    String?
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("trade_requests")
}

model Membership {
  id                          Int           @id @default(autoincrement())

  name                        String       @unique
  description                 String
  price                       Float
  status                      String        @default("UNSOLD")
  updatedAt                   DateTime      @default(now())
  createdAt                   DateTime      @default(now())

  creator                     User          @relation(name: "MembershipCreator", fields: [creatorId], references: [id])
  creatorId                   Int
  
  owner                       User          @relation(name: "MembershipOwner", fields: [ownerEthereumAddress], references: [ethereumAddress])
  ownerEthereumAddress        String

  @@map("memberships")
}
