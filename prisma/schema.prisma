generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int            @id @default(autoincrement())
  username  String         @unique
  digest    String
  role      String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  requests  TradeRequest[]

  wallet        Wallet @relation(fields: [walletAddress], references: [address])
  walletAddress String @unique

  memberships Membership[] @relation(name: "MembershipOwner")
  curated     Membership[] @relation(name: "MembershipCreator")

  @@map("users")
}

model Wallet {
  id               Int    @id @default(autoincrement())
  address          String @unique
  privateKeyDigest String
  publicKey        String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner User?

  @@map("wallets")
}

model TradeRequest {
  // üìù Extend this model 

  id        Int      @id @default(autoincrement())
  status    String?
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("trade_requests")
}

model Membership {
  id              Int @id @default(autoincrement())
  name            String
  description     String
  price           Float
  status          String   @default("UNSOLD")
  trxHash         String   
  collectionTag   String?

  updatedAt       DateTime @default(now())
  createdAt       DateTime @default(now())

  creator         User @relation(name: "MembershipCreator", fields: [creatorId], references: [id])
  creatorId       Int

  owner           User @relation(name: "MembershipOwner", fields: [ownerId], references: [id])
  ownerId         Int

  @@map("memberships")
}
